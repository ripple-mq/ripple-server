// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/bootstrap_service.proto

package bootstrapserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BootstrapServer_CreateBucket_FullMethodName          = "/bootstrapserver.BootstrapServer/CreateBucket"
	BootstrapServer_GetProducerConnection_FullMethodName = "/bootstrapserver.BootstrapServer/GetProducerConnection"
	BootstrapServer_GetConsumerConnection_FullMethodName = "/bootstrapserver.BootstrapServer/GetConsumerConnection"
)

// BootstrapServerClient is the client API for BootstrapServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BootstrapServerClient interface {
	CreateBucket(ctx context.Context, in *CreateBucketReq, opts ...grpc.CallOption) (*CreateBucketResp, error)
	GetProducerConnection(ctx context.Context, in *GetProducerConnectionReq, opts ...grpc.CallOption) (*GetProducerConnectionResp, error)
	GetConsumerConnection(ctx context.Context, in *GetConsumerConnnectionReq, opts ...grpc.CallOption) (*GetConsumerConnectionResp, error)
}

type bootstrapServerClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrapServerClient(cc grpc.ClientConnInterface) BootstrapServerClient {
	return &bootstrapServerClient{cc}
}

func (c *bootstrapServerClient) CreateBucket(ctx context.Context, in *CreateBucketReq, opts ...grpc.CallOption) (*CreateBucketResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBucketResp)
	err := c.cc.Invoke(ctx, BootstrapServer_CreateBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServerClient) GetProducerConnection(ctx context.Context, in *GetProducerConnectionReq, opts ...grpc.CallOption) (*GetProducerConnectionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProducerConnectionResp)
	err := c.cc.Invoke(ctx, BootstrapServer_GetProducerConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServerClient) GetConsumerConnection(ctx context.Context, in *GetConsumerConnnectionReq, opts ...grpc.CallOption) (*GetConsumerConnectionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConsumerConnectionResp)
	err := c.cc.Invoke(ctx, BootstrapServer_GetConsumerConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootstrapServerServer is the server API for BootstrapServer service.
// All implementations must embed UnimplementedBootstrapServerServer
// for forward compatibility.
type BootstrapServerServer interface {
	CreateBucket(context.Context, *CreateBucketReq) (*CreateBucketResp, error)
	GetProducerConnection(context.Context, *GetProducerConnectionReq) (*GetProducerConnectionResp, error)
	GetConsumerConnection(context.Context, *GetConsumerConnnectionReq) (*GetConsumerConnectionResp, error)
	mustEmbedUnimplementedBootstrapServerServer()
}

// UnimplementedBootstrapServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBootstrapServerServer struct{}

func (UnimplementedBootstrapServerServer) CreateBucket(context.Context, *CreateBucketReq) (*CreateBucketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedBootstrapServerServer) GetProducerConnection(context.Context, *GetProducerConnectionReq) (*GetProducerConnectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducerConnection not implemented")
}
func (UnimplementedBootstrapServerServer) GetConsumerConnection(context.Context, *GetConsumerConnnectionReq) (*GetConsumerConnectionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerConnection not implemented")
}
func (UnimplementedBootstrapServerServer) mustEmbedUnimplementedBootstrapServerServer() {}
func (UnimplementedBootstrapServerServer) testEmbeddedByValue()                         {}

// UnsafeBootstrapServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BootstrapServerServer will
// result in compilation errors.
type UnsafeBootstrapServerServer interface {
	mustEmbedUnimplementedBootstrapServerServer()
}

func RegisterBootstrapServerServer(s grpc.ServiceRegistrar, srv BootstrapServerServer) {
	// If the following call pancis, it indicates UnimplementedBootstrapServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BootstrapServer_ServiceDesc, srv)
}

func _BootstrapServer_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServerServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapServer_CreateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServerServer).CreateBucket(ctx, req.(*CreateBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapServer_GetProducerConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProducerConnectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServerServer).GetProducerConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapServer_GetProducerConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServerServer).GetProducerConnection(ctx, req.(*GetProducerConnectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapServer_GetConsumerConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerConnnectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServerServer).GetConsumerConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapServer_GetConsumerConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServerServer).GetConsumerConnection(ctx, req.(*GetConsumerConnnectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BootstrapServer_ServiceDesc is the grpc.ServiceDesc for BootstrapServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BootstrapServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bootstrapserver.BootstrapServer",
	HandlerType: (*BootstrapServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBucket",
			Handler:    _BootstrapServer_CreateBucket_Handler,
		},
		{
			MethodName: "GetProducerConnection",
			Handler:    _BootstrapServer_GetProducerConnection_Handler,
		},
		{
			MethodName: "GetConsumerConnection",
			Handler:    _BootstrapServer_GetConsumerConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bootstrap_service.proto",
}
